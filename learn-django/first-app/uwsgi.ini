[uwsgi]
chdir = /Users/learnzpk/Desktop/mySpace/zpk-learn/learn-django/first-app

virtualenv = /Users/learnzpk/Applications/anaconda2/envs/py37
plugin = python3
wsgi-file = %(chdir)/mysite/wsgi.py

http-socket = 0.0.0.0:8000
master = true
workers = 3
status = 0.0.0.0:8002

vacuum = true

buffer-size = 40000

daemonize = %(chdir)/uwsgi.log
pidfile = %(chdir)/uwsgi.pid
stats = %(chdir)/uwsgi.stats
stats-http = true

static-map=/static=static
# callable = manage: 模块中的应用对象
#processes ： 开启的进程数量

#workers ： 开启的进程数量，等同于processes（官网的说法是spawn the specified number of  workers / processes）

# home : python虚拟环境路径


#stats ： 在指定的地址上，开启状态服务（enable the stats server on the specified address）

#threads ： 运行线程。由于GIL的存在，我觉得这个真心没啥用。（run each worker in prethreaded mode with the specified number of threads）

#master ： 允许主进程存在（enable master process）

#daemonize ： 使进程在后台运行，并将日志打到指定的日志文件或者udp服务器（daemonize uWSGI）。实际上最常用的，还是把运行记录输出到一个本地文件上。

#log-maxsize ：以固定的文件大小（单位KB），切割日志文件。 例如：log-maxsize = 50000000  就是50M一个日志文件。

#pidfile ： 指定pid文件的位置，记录主进程的pid号。

#vacuum ： 当服务器退出的时候自动清理环境，删除unix socket文件和pid文件（try to remove all of the generated file/sockets）

#disable-logging ： 不记录请求信息的日志。只记录错误以及uWSGI内部消息到日志中。如果不开启这项，那么你的日志中会大量出现这种记录：
